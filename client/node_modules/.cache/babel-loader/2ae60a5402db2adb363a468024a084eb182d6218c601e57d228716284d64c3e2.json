{"ast":null,"code":"var _jsxFileName = \"D:\\\\Sih Drone\\\\drone\\\\client\\\\src\\\\pages\\\\VerifyEmail.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { baseUrl } from '../utils/services';\nimport { Context } from '../context/Context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VerifyEmail = () => {\n  _s();\n  const {\n    notifyAlert,\n    socket,\n    socketConnect\n  } = useContext(Context);\n  const {\n    token\n  } = useParams();\n  const [isUserVerified, setIsUserVerified] = useState(null);\n  const handleVerification = async () => {\n    try {\n      var _response$data;\n      const response = await axios.post(`${baseUrl}/api/disaster/auth`, {\n        token\n      });\n      console.log(response);\n      if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.error) {\n        setIsUserVerified(false);\n      } else if (response.data.message === 'Alert sent') {\n        await notifyAlert(response.data.data);\n        setIsUserVerified(true);\n      }\n    } catch (error) {\n      console.error('Error verifying email:', error);\n      setIsUserVerified(false);\n    }\n  };\n  useEffect(() => {\n    if (isUserVerified === null && socket != null) {\n      handleVerification();\n    }\n  }, [isUserVerified, socket]);\n  if (isUserVerified === null) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this); // You can replace this with a loading indicator\n  } else if (!isUserVerified) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Alert failed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this);\n  } else if (isUserVerified) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"Alert Sent\"\n    }, void 0, false);\n  }\n};\n_s(VerifyEmail, \"Bv+4Su9C05eXZVjVkX70dRvV878=\", false, function () {\n  return [useParams];\n});\n_c = VerifyEmail;\nexport default VerifyEmail;\nvar _c;\n$RefreshReg$(_c, \"VerifyEmail\");","map":{"version":3,"names":["React","useContext","useState","useEffect","useParams","axios","baseUrl","Context","jsxDEV","_jsxDEV","Fragment","_Fragment","VerifyEmail","_s","notifyAlert","socket","socketConnect","token","isUserVerified","setIsUserVerified","handleVerification","_response$data","response","post","console","log","data","error","message","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Sih Drone/drone/client/src/pages/VerifyEmail.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { baseUrl } from '../utils/services';\r\nimport { Context } from '../context/Context';\r\n\r\nconst VerifyEmail = () => {\r\n  const { notifyAlert, socket, socketConnect } = useContext(Context);\r\n  const { token } = useParams();\r\n  const [isUserVerified, setIsUserVerified] = useState(null);\r\n\r\n  const handleVerification = async () => {\r\n    try {\r\n      const response = await axios.post(`${baseUrl}/api/disaster/auth`, { token });\r\n      console.log(response);\r\n      if (response.data?.error) {\r\n        setIsUserVerified(false);\r\n      } else if (response.data.message === 'Alert sent') {\r\n        await notifyAlert(response.data.data);\r\n        setIsUserVerified(true);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error verifying email:', error);\r\n      setIsUserVerified(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isUserVerified === null && socket != null) {\r\n      handleVerification();\r\n    }\r\n  }, [isUserVerified, socket]);\r\n\r\n  if (isUserVerified === null) {\r\n    return <p>Loading...</p>; // You can replace this with a loading indicator\r\n  } else if (!isUserVerified) {\r\n    return <p>Alert failed</p>;\r\n  } else if (isUserVerified) {\r\n    return (\r\n      <>Alert Sent</>\r\n    );\r\n  }\r\n};\r\n\r\nexport default VerifyEmail;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC9D,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,mBAAmB;AAC3C,SAASC,OAAO,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE7C,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM;IAAEC,WAAW;IAAEC,MAAM;IAAEC;EAAc,CAAC,GAAGf,UAAU,CAACM,OAAO,CAAC;EAClE,MAAM;IAAEU;EAAM,CAAC,GAAGb,SAAS,CAAC,CAAC;EAC7B,MAAM,CAACc,cAAc,EAAEC,iBAAiB,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAE1D,MAAMkB,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MAAA,IAAAC,cAAA;MACF,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAAE,GAAEjB,OAAQ,oBAAmB,EAAE;QAAEW;MAAM,CAAC,CAAC;MAC5EO,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;MACrB,KAAAD,cAAA,GAAIC,QAAQ,CAACI,IAAI,cAAAL,cAAA,eAAbA,cAAA,CAAeM,KAAK,EAAE;QACxBR,iBAAiB,CAAC,KAAK,CAAC;MAC1B,CAAC,MAAM,IAAIG,QAAQ,CAACI,IAAI,CAACE,OAAO,KAAK,YAAY,EAAE;QACjD,MAAMd,WAAW,CAACQ,QAAQ,CAACI,IAAI,CAACA,IAAI,CAAC;QACrCP,iBAAiB,CAAC,IAAI,CAAC;MACzB;IACF,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CR,iBAAiB,CAAC,KAAK,CAAC;IAC1B;EACF,CAAC;EAEDhB,SAAS,CAAC,MAAM;IACd,IAAIe,cAAc,KAAK,IAAI,IAAIH,MAAM,IAAI,IAAI,EAAE;MAC7CK,kBAAkB,CAAC,CAAC;IACtB;EACF,CAAC,EAAE,CAACF,cAAc,EAAEH,MAAM,CAAC,CAAC;EAE5B,IAAIG,cAAc,KAAK,IAAI,EAAE;IAC3B,oBAAOT,OAAA;MAAAoB,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAC,CAAC;EAC5B,CAAC,MAAM,IAAI,CAACf,cAAc,EAAE;IAC1B,oBAAOT,OAAA;MAAAoB,QAAA,EAAG;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC5B,CAAC,MAAM,IAAIf,cAAc,EAAE;IACzB,oBACET,OAAA,CAAAE,SAAA;MAAAkB,QAAA,EAAE;IAAU,gBAAE,CAAC;EAEnB;AACF,CAAC;AAAChB,EAAA,CApCID,WAAW;EAAA,QAEGR,SAAS;AAAA;AAAA8B,EAAA,GAFvBtB,WAAW;AAsCjB,eAAeA,WAAW;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}